# Set your top_n as needed (e.g., 3, 5, -1)
top_n = 3  
merged_data['SkillGap'] = merged_data.apply(lambda row: apply_skill_gap(row, top_n), axis=1)


def apply_skill_gap(row, top_n=3):
    author_skills = [skill.strip().lower() for skill in str(row['AuthorSkill']).split(',')]
    iskill_json = row.get('iSkill', [])

    if not isinstance(iskill_json, list):
        return 'Yes'

    # Extract SkillNames from iSkill JSON
    skill_names = [entry.get('SkillName', '').strip().lower() for entry in iskill_json]

    # Pick top N
    if top_n != -1:
        skill_names = skill_names[:top_n]

    # Check for any match
    has_match = any(skill in skill_names for skill in author_skills)
    return 'No' if has_match else 'Yes'

import concurrent.futures
from exchangelib import Credentials, Account
import pandas as pd
import time

# Set your Exchange credentials
EMAIL = "your.email@company.com"
PASSWORD = "your_password"

# Connect to Exchange
try:
    print("Connecting to Exchange...")
    credentials = Credentials(EMAIL, PASSWORD)
    account = Account(EMAIL, credentials=credentials, autodiscover=True)
    print("‚úÖ Connected to Exchange successfully!")

except Exception as e:
    print(f"‚ùå ERROR: Unable to connect to Exchange. {e}")
    exit()

# Function to fetch a batch of GAL contacts
def fetch_contacts():
    try:
        print("üìå Fetching Global Address List (GAL)...")

        # Query all contacts with a wildcard (*)
        resolved_names = account.protocol.resolve_names("*", return_full_contact_data=True)
        contacts = []

        for user in resolved_names:
            if user and user.email_addresses:
                job_title = user.job_title if user.job_title else ""
                
                # ‚úÖ Skip contacts where jobTitle is empty
                if not job_title.strip():
                    continue  

                contacts.append([
                    user.display_name,
                    user.email_addresses[0] if user.email_addresses else "N/A",
                    job_title,
                    user.department if user.department else "N/A",
                    user.office_location if user.office_location else "N/A"
                ])
        
        print(f"‚úÖ Completed: Fetched {len(contacts)} valid contacts (Job Title Required)")
        return contacts

    except Exception as e:
        print(f"‚ö†Ô∏è Error fetching GAL: {e}")
        return []

# Multithreading Execution
contacts = []
start_time = time.time()

# Use ThreadPoolExecutor to fetch data in multiple threads
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
    results = executor.map(fetch_contacts, range(5))  # Run 5 parallel queries

# Flatten the results
for result in results:
    contacts.extend(result)

# Convert to DataFrame
df = pd.DataFrame(contacts, columns=["Full Name", "Email", "Job Title", "Department", "Office Location"])

# Save to CSV
output_file = "C:\\Users\\Public\\GAL_EWS_Contacts.csv"
df.to_csv(output_file, index=False, encoding="utf-8")

# Print execution summary
elapsed_time = time.time() - start_time
print(f"\n‚úÖ Export completed successfully! Data saved to {output_file}")
print(f"üîπ Total Valid Records Processed: {len(contacts)} (Excluding empty job titles)")
print(f"‚è≥ Total Execution Time: {elapsed_time:.2f} seconds")

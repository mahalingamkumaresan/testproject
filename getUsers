Sub ExportAllOutlookContactsWithLogging()
    Dim OutlookApp As Object
    Dim Namespace As Object
    Dim GAL As Object
    Dim AddressEntry As Object
    Dim user As Object
    Dim ExcelApp As Object
    Dim wb As Object
    Dim ws As Object
    Dim logFile As Object
    Dim fso As Object
    Dim rowNum As Long
    Dim NameParts() As String
    Dim FirstName As String
    Dim LastName As String
    Dim FullName As String
    Dim BusinessAddress As String
    Dim DataArray() As Variant
    Dim count As Integer
    Dim logFilePath As String
    Dim ManagerName As String
    Dim ManagerEmail As String
    Dim startTime As Double
    
    ' Set log file path
    logFilePath = "C:\Users\Public\Outlook_Export_Log.txt"

    ' Initialize File System Object for logging
    Set fso = CreateObject("Scripting.FileSystemObject")
    Set logFile = fso.OpenTextFile(logFilePath, 8, True) ' Open in append mode
    
    ' Start logging
    logFile.WriteLine "Export started at: " & Now

    ' Initialize Outlook and Global Address List (GAL)
    On Error Resume Next
    Set OutlookApp = CreateObject("Outlook.Application")
    Set Namespace = OutlookApp.GetNamespace("MAPI")
    Set GAL = Namespace.AddressLists("Global Address List")
    On Error GoTo 0

    If OutlookApp Is Nothing Or GAL Is Nothing Then
        logFile.WriteLine "ERROR: Unable to access Outlook GAL. Check Outlook settings."
        logFile.Close
        MsgBox "Error: Unable to access Outlook GAL. Check your Outlook settings.", vbCritical, "Outlook Error"
        Exit Sub
    End If

    ' Create a new instance of Excel if not already open
    On Error Resume Next
    Set ExcelApp = GetObject(, "Excel.Application")
    If ExcelApp Is Nothing Then
        Set ExcelApp = CreateObject("Excel.Application")
        ExcelApp.Visible = False ' Keep Excel hidden while processing
    End If
    On Error GoTo 0

    ' Create a new workbook
    Set wb = ExcelApp.Workbooks.Add
    Set ws = wb.Sheets(1)

    ' Turn off screen updating and calculation for speed
    wb.Application.ScreenUpdating = False
    wb.Application.Calculation = -4135 ' xlCalculationManual

    ' Write header row
    Dim Headers As Variant
    Headers = Array("Full Name", "First Name", "Last Name", "Email", "Job Title", "Department", "Office Location", _
                    "Business Address", "Work Phone", "Mobile Number", "Manager Name", "Manager Email", "Notes")
    ws.Range("A1:M1").Value = Headers

    ' Prepare data storage array
    count = 0
    rowNum = 2 ' Start from row 2
    ReDim DataArray(1 To GAL.AddressEntries.Count, 1 To 13) ' Define array size based on entry count

    ' Loop through all Address Entries
    For Each AddressEntry In GAL.AddressEntries
        If AddressEntry.AddressEntryUserType = 0 Then ' Ensure it's a user
            Set user = AddressEntry.GetExchangeUser()
            
            If Not user Is Nothing Then
                ' Fix for Last Name appearing as "." and First Name empty
                FullName = Trim(user.Name)
                If FullName = "." Or FullName = "" Then
                    FullName = "Unknown"
                End If

                ' Split into First Name & Last Name
                NameParts = Split(FullName, " ")
                If UBound(NameParts) >= 1 Then
                    LastName = NameParts(UBound(NameParts)) ' Last word as Last Name
                    FirstName = Trim(Left(FullName, Len(FullName) - Len(LastName)))
                Else
                    FirstName = FullName
                    LastName = "Unknown"
                End If

                ' Fix for missing Business Address
                On Error Resume Next
                BusinessAddress = user.OfficeAddress
                If BusinessAddress = "" Or IsNull(BusinessAddress) Then BusinessAddress = user.BusinessAddress
                If BusinessAddress = "" Or IsNull(BusinessAddress) Then BusinessAddress = user.StreetAddress
                If BusinessAddress = "" Or IsNull(BusinessAddress) Then BusinessAddress = "Not Available"
                On Error GoTo 0

                ' Handle Manager Permission Errors
                On Error Resume Next
                ManagerName = user.Manager.Name
                ManagerEmail = user.Manager.PrimarySmtpAddress
                If Err.Number <> 0 Then
                    ManagerName = "Permission Denied"
                    ManagerEmail = "Permission Denied"
                    logFile.WriteLine "WARNING: Manager details not accessible for " & FullName
                End If
                Err.Clear
                On Error GoTo 0

                ' Store data in array instead of writing cell by cell
                DataArray(count + 1, 1) = FullName
                DataArray(count + 1, 2) = FirstName
                DataArray(count + 1, 3) = LastName
                DataArray(count + 1, 4) = user.PrimarySmtpAddress
                DataArray(count + 1, 5) = IIf(user.JobTitle <> "", user.JobTitle, "N/A")
                DataArray(count + 1, 6) = IIf(user.Department <> "", user.Department, "N/A")
                DataArray(count + 1, 7) = IIf(user.OfficeLocation <> "", user.OfficeLocation, "N/A")
                DataArray(count + 1, 8) = BusinessAddress
                DataArray(count + 1, 9) = IIf(user.BusinessTelephoneNumber <> "", user.BusinessTelephoneNumber, "N/A")
                DataArray(count + 1, 10) = IIf(user.MobileTelephoneNumber <> "", user.MobileTelephoneNumber, "N/A")
                DataArray(count + 1, 11) = ManagerName
                DataArray(count + 1, 12) = ManagerEmail
                DataArray(count + 1, 13) = IIf(user.Notes <> "", user.Notes, "N/A")

                count = count + 1
            End If
        End If
    Next AddressEntry

    ' Write all data at once to Excel
    ws.Range("A2").Resize(count, 13).Value = DataArray

    ' Turn screen updating and calculations back on
    wb.Application.ScreenUpdating = True
    wb.Application.Calculation = -4105 ' xlCalculationAutomatic

    ' Autofit columns for better readability
    ws.Columns("A:M").AutoFit

    ' Save the workbook
    Dim filePath As String
    filePath = "C:\Users\Public\Outlook_GAL_Contacts.xlsx"
    wb.SaveAs filePath
    logFile.WriteLine "Export completed successfully! " & count & " Outlook contacts saved."
    logFile.WriteLine "File saved at: " & filePath
    logFile.WriteLine "Export ended at: " & Now
    logFile.Close

    ' Cleanup
    wb.Close True ' Close Excel file and save changes
    ExcelApp.Quit ' Close Excel application

    ' Release memory
    Set ws = Nothing
    Set wb = Nothing
    Set ExcelApp = Nothing
    Set OutlookApp = Nothing
    Set Namespace = Nothing
    Set GAL = Nothing
    Set fso = Nothing
End Sub

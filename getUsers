import pandas as pd
import time
import random
import re
import os
from exchangelib import Credentials, Account

# ✅ Define Common Base Path
BASE_PATH = "C:\\Users\\Public\\"

# ✅ Set File Paths
INPUT_FILE = os.path.join(BASE_PATH, "input_contacts.xlsx")
OUTPUT_FILE = os.path.join(BASE_PATH, "GAL_Contact_Details.xlsx")
SKIP_LOG_FILE = os.path.join(BASE_PATH, "GAL_Skipped_Entries.log")

# ✅ Set your Exchange credentials
EMAIL = "your.email@company.com"
PASSWORD = "your_password"

# ✅ Connect to Exchange
try:
    print("Connecting to Exchange...")
    credentials = Credentials(EMAIL, PASSWORD)
    account = Account(EMAIL, credentials=credentials, autodiscover=True)
    print("✅ Connected to Exchange successfully!")
except Exception as e:
    print(f"❌ ERROR: Unable to connect to Exchange. {e}")
    exit()

# ✅ Function to extract Standard ID from name format "LastName, FirstName STANDARDID"
def extract_standard_id(name):
    if name and isinstance(name, str):
        match = re.search(r'\b(\w+)$', name)  # Extracts last word (Standard ID)
        return match.group(1) if match else "N/A"
    return "N/A"

# ✅ Function to log skipped entries with reason
def log_skipped(reason, user_data="N/A"):
    message = f"⚠️ Skipping entry: {reason} | Data: {user_data}"
    print(message)  # Print to console
    with open(SKIP_LOG_FILE, "a", encoding="utf-8") as log_file:
        log_file.write(message + "\n")  # Log to file

# ✅ Read emails from the input Excel file
try:
    df_input = pd.read_excel(INPUT_FILE)
    email_list = df_input["Email"].dropna().unique().tolist()
    print(f"📌 Found {len(email_list)} unique emails to process.")
except Exception as e:
    print(f"❌ ERROR: Unable to read input file. {e}")
    exit()

# ✅ Function to fetch details for emails in the list
def fetch_contact_details(emails):
    """Fetch contact details for specific email addresses from GAL."""
    contacts = []

    for email in emails:
        try:
            print(f"🔍 Fetching details for: {email} ...")
            time.sleep(random.uniform(0.5, 2))  # ✅ Add delay to prevent server overload

            resolved_names = account.protocol.resolve_names(email, return_full_contact_data=True)

            if not resolved_names:
                log_skipped("No GAL record found", email)
                continue  # ✅ Skip if no data is found

            for user in resolved_names:
                display_name = standard_id = job_title = department = city = country = zip_code = manager_name = manager_standard_id = "N/A"
                direct_reports_count = 0

                if isinstance(user, tuple) and len(user) >= 2:  # ✅ Normal Case (Tuple User)
                    display_name = user[1].display_name if hasattr(user[1], "display_name") else "N/A"
                    standard_id = extract_standard_id(user[0].name) if hasattr(user[0], "name") else "N/A"

                    job_title = str(user[1].job_title).strip() if hasattr(user[1], "job_title") and user[1].job_title else "N/A"
                    if job_title == "N/A":
                        log_skipped("Job Title is empty", email)
                        continue  

                    department = str(user[1].department).strip() if hasattr(user[1], "department") and user[1].department else "N/A"

                    if hasattr(user[1], "physical_addresses") and isinstance(user[1].physical_addresses, tuple) and len(user[1].physical_addresses) > 0:
                        address = user[1].physical_addresses[0]
                        city = str(address.city).strip() if hasattr(address, "city") and address.city else "N/A"
                        country = str(address.country).strip() if hasattr(address, "country") and address.country else "N/A"
                        zip_code = str(address.zipcode).strip() if hasattr(address, "zipcode") and address.zipcode else "N/A"

                    # ✅ Fixing Manager Extraction
                    if hasattr(user[1], "manager") and user[1].manager:
                        manager_name = user[1].manager.display_name if hasattr(user[1].manager, "display_name") else "N/A"
                        manager_standard_id = extract_standard_id(user[1].manager.name if hasattr(user[1].manager, "name") else "N/A")

                    # ✅ Fixing Direct Reports Extraction
                    if hasattr(user[1], "direct_reports") and isinstance(user[1].direct_reports, list):
                        direct_reports_count = len(user[1].direct_reports)

                contacts.append([
                    email, display_name, standard_id, job_title, department,
                    city, country, zip_code, manager_name, manager_standard_id, direct_reports_count
                ])

            print(f"✅ Fetched details for {email}")

        except Exception as e:
            log_skipped(f"Unexpected error: {e}", email)

    return contacts

# ✅ Fetch details for emails from Excel
start_time = time.time()
contacts = fetch_contact_details(email_list)

# ✅ Convert to DataFrame
df_output = pd.DataFrame(contacts, columns=[
    "Email", "Display Name", "Standard ID", "Job Title", "Department",
    "City", "Country", "Zip Code", "Manager Name", "Manager Standard ID", "Direct Reports Count"
])

# ✅ Save to Excel
df_output.to_excel(OUTPUT_FILE, index=False, encoding="utf-8")

# ✅ Print execution summary
elapsed_time = time.time() - start_time
print(f"\n✅ Export completed successfully! Data saved to {OUTPUT_FILE}")
print(f"🔹 Total Valid Records Processed: {len(contacts)}")
print(f"⏳ Total Execution Time: {elapsed_time:.2f} seconds")
print(f"⚠️ Skipped entries logged in: {SKIP_LOG_FILE}")
